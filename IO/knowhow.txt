1- check and modify the bad blocks
1- dilatancy the raw and qcow2 img
2- tune2fs
3- du
4- stat -f .  # get the blocks information
5- sg_vpd
6-  Warning: partition is not properly aligned for best performance [KW. %]
7- block size & sector 
8- major and minor device number
9- resize image
10- get the file-system type
11- blktrace

1) check and modify the bad blocks
  1. how to check the bad blocks of disk
  # badblocks -s -v  -o /home/cdrom.log /dev/cdrom
  2. how to quckly check the bad blocks
  # smartctl -a  /dev/cdrom
  3. modify the bad blocks
  # badblocks -s -w /dev/sda END START
  # fsck -a /dev/sda
2) dilatancy the raw and qcow2 img
  --------raw-------------------
  1. # virsh shutdown vm1
  1. # dd if=/dev/zero bs=1024k count=5000 >> /sda6/wulm/I_img/rhel7.4_clone_1.img
  2. # qemu-img info /sda6/wulm/I_img/rhel7.4_clone_1.img
  3. # virsh start vm1
  4. # fdisk /dev/vda
  5. # mkfs.xfs /dev/vda4
  -------qcow2-----------------
  1. # virsh shutdown vm1
  2. # qemu-img resize rhel74.qcow2 +6G
  3. # virsh start vm1
  4. # fdisk /dev/vda
  5. # mkfs.xfs /dev/vda4
3) tune2fs 
  - adjust tunable filesystem parameters on ext2/ext3/ext4 filesystems
  1. clear the feature of partion
  -O :		Set or clear the indicated filesystem features (options) in the filesystem.
  ^dir_index:	will clear the indeicated features with ^.
  
  # /sbin/tune2fs -O ^dir_index /dev/sda1

  2. get the blocksize of partion, in general, 4096 byte.

  #/sbin/tune2fs -l /dev/sda1|grep "Block size" 
 
4) du
  1. get directory total size
   # du -csh
  
  2. get every directory size
   # du -lh
  
  3. get every file size
   # du -ah

5) how to see the hard info of disk
 #yum --disablerepo="*" --enablerepo="rhel7.3" install sg3_utils

 1. get the rotation rate of disk 
 # sg_vpd /dev/sda --page=bdc
  Block device characteristics VPD page (SBC):
  Nominal rotation rate: 7200 rpm
  Product type: Not specified

 2. get the ata information
 # sg_vpd /dev/sda --page=ai
  ATA information VPD page:
  SAT Vendor identification: linux
  SAT Product identification: libata
  SAT Product revision level: 3.00
  ATA command IDENTIFY DEVICE response summary:
    model: Hitachi HDP725050GLA360
    serial number:       GEC534RF240MVE
    firmware revision: GM4OA5CA

6. Warning: partition is not properly aligned for best performance 
  # parted -s /dev/sde mkpart primary xfs 0 100000
    Warning: The resulting partition is not properly aligned for best performance.

  solution:
  1) Get the alignment parameters for your array
   # cat /sys/block/sde/queue/optimal_io_size
	0  ---------------------------------> a
   # cat /sys/block/sde/queue/minimum_io_size
	4096 -------------------------------> b
   # cat /sys/block/sde/alignment_offset
   
   
	0 ----------------------------------> c
   # cat /sys/block/sde/queue/physical_block_size
	4096 -------------------------------> d		
  2) Add optimal_io_size to alignment_offset 
     and divide the result by physical_block_size.
     In my case this was (a+c)/d = 0
  3) This number is the sector at which the partition 
     should start. Your new parted command should look like
    # parted -s /dev/sde mkpart primary xfs 0 100000

  4) If all went well, the partition will have been created with no warnings. You can check the alignment thusly
    # parted -s /dev/sde mkpart primary xfs 1 100000
    # parted  /dev/sde align-check optimal 1
     1 aligned
 
    The trailing 's'  is important: it tells parted that you are
     talking about sectors, not bytes or megabytes.
    # parted -s /dev/sde mkpart primary xfs 1s 100000 (different with URL)
    # parted  /dev/sde align-check optimal 1
     1 not aligned
    https://rainbow.chard.org/2013/01/30/how-to-align-partitions-for-best-performance-using-parted/
    
   summary: using 0% is best and easiest method. (KW. % percntage)

8. major and minor device number

  # ls -l /dev/
   crw-------. 1 root root     10, 235 Dec  2 15:58 autofs
                                ^   ^
                              major minor

9. resize image
 - resize +10G (SLES15)
  1) host
     # qemu-img resize /sda6/wulm/I_img/sles15.raw +10G
     # virsh shutdown sles15
     # virsh start sles15
  2) guest
     # parted
       resizepart
     # mount /dev/vda2  /mnt/
     # btrfs filesystem resize max /mnt/  
     # reboot
  
 - resize +10G (RHEL7)
  1) host
     # qemu-img resize /sda6/wulm/I_img/rhel7.3_1.qcow2 +10G
     # virsh shutdown rhel7.3_1
     # virsh start rhel7.3_1
  2) guest
     # fdisk  
       p -> n -> p -> w
     # partprobe /dev/vda
     # partprobe -s  
     add vda3 to the lvm
     # reboot  <- if use partprobe can skip this
     # pvcreate /dev/vda3
       Physical volume "/dev/vda3" successfully created.
     # pvs
       PV         VG   Fmt  Attr PSize  PFree
       /dev/vda2  rhel lvm2 a--  14.00g     0
       /dev/vda3       lvm2 ---  10.00g 10.00g
     # vgextend rhel /dev/vda3
       Volume group "rhel" successfully extended
     # pvs
       PV         VG   Fmt  Attr PSize  PFree
       /dev/vda2  rhel lvm2 a--  14.00g     0
       /dev/vda3  rhel lvm2 a--  10.00g 10.00g
     # vgs
       VG   #PV #LV #SN Attr   VSize  VFree
       rhel   2   2   0 wz--n- 23.99g 10.00g
     # lvcreate systemvg -n mylv -L 20G
 
     how to add VFree(10g) into root
     # lvs
       LV   VG   Attr       LSize  Pool Origin Data%  Meta%  Move Log Cpy%Sync Convert
       root rhel -wi-ao---- 12.50g
       swap rhel -wi-ao----  1.50g
     # lvextend -l +100%FREE /dev/rhel/root
       Size of logical volume rhel/root changed from 12.50 GiB (3199 extents) to 22.49 GiB (5758 extents).
       Logical volume rhel/root successfully resized.
     # lvs
       LV   VG   Attr       LSize  Pool Origin Data%  Meta%  Move Log Cpy%Sync Convert
       root rhel -wi-ao---- 22.49g
       swap rhel -wi-ao----  1.50g

     # xfs_growfs /dev/mapper/rhel-root
     success !!
     # df -hT
       Filesystem               Type      Size  Used Avail Use% Mounted on
       /dev/mapper/rhel-root    xfs        23G   12G   11G  53% /





10. get the file-system type
    1) fsck
      # fsck -N /dev/vda2
      fsck from util-linux 2.31.1
      [/sbin/fsck.btrfs (1) -- /] fsck.btrfs /dev/vda2
    2) lsblk
      # lsblk -f
        NAME        FSTYPE      LABEL               UUID                                   MOUNTPOINT
        sda
        |-sda1      xfs                             9aab062e-3a96-4a53-9c88-94b620e0ce05   /boot
        |-sda2      xfs                         
    3) mount
      # mount  |grep "^/dev"
        /dev/vda2 on / type btrfs (rw,relatime,space_cache,subvolid=266,subvol=/@/.snapshots/1/snapshot)
        /dev/vda2 on /.snapshots type btrfs (rw,relatime,space_cache,subvolid=265,subvol=/@/.snapshots)
    4) blkid
      # blkid /dev/vda2
      /dev/vda2: UUID="ac1d758d-2438-4108-a4ef-aee99d3f9277" UUID_SUB="f502de05-3f55-489c-9437-9bce54b5fa86" TYPE="btrfs" PARTUUID="7b4e3b89-e2c9-45ed-902c-a9f8a4633c1a"
    5) file
       # file -sL /dev/vda2
       /dev/vda2: BTRFS Filesystem sectorsize 4096, nodesize 16384, leafsize 16384, UUID=ac1d758d-2438-4108-a4ef-aee99d3f9277, 22414446592/27390562304 bytes used, 1 devices
    6) # cat /etc/fstab

11. blktrace
  http://fibrevillage.com/storage/539-blktrace-and-btt-example-to-debug-and-tune-disk-i-o-on-linux
  1) output info
   -Q  will generate IO request
   -G  generated IO request
   -I  IO entry scheduler queue
   -D  IO entry driver
   -C  IO complete
   Q------->G------------>I--------->M------------------->D----------------------------->C
   |-Q time-|-Insert time-|
   |--------- merge time ------------|-merge with other IO|
   |----------------scheduler time time-------------------|---driver,adapter,storagetime--|
   
   |----------------------- await time in iostat output ----------------------------------| 
   -Q2G  Q->G cost time, generated IO time(including remap and split time)
   -G2I  G->I cost time until entry scheduler queue
   -I2D  I->D waiting time at IO scheduler queue
   -D2C  D->C cost time at driver and hardware
   -Q2C  cost time of whole IO request equal await of iostat
   Q2Q - time between requests sent to the block layer
   Q2G - time from a block I/O is queued to the time it gets a request allocated for it
   G2I - time from a request is allocated to the time it is Inserted into the device's queue
   Q2M - time from a block I/O is queued to the time it gets merged with an existing request
   I2D - time from a request is inserted into the device's queue to the time it is actually issued to the device
   M2D - time from a block I/O is merged with an exiting request until the request is issued to the device
   C - service time of the request by the device
   Q2C - total time spent in the block layer for a request
  2) usage
   --1
   # blktrace -d /dev/sdb -o - | blkparse -i -
   --2
   # blktrace -d /dev/sdb -o sdb.log
   # blkparse -i sdb.log
   --3
   # blktrace -d /dev/sdb -o sdb.log
   # blkparse -i sdb.log -d sdb.bin
   # btt -i sdb.bin
  3) intepret report
    # btt -i btt
      ==================== All Devices ====================
      
                  ALL           MIN           AVG           MAX           N
      --------------- ------------- ------------- ------------- -----------
      Q2Qdm             0.000135334   0.001324336   0.004180522           6
      Q2Cdm             0.000092110   0.001113028   0.004146520           7
      
      Q2G               0.000000945   0.000001092   0.000001258           7
      G2I               0.000001862   0.000002042   0.000002463           7
      I2D               0.000001440   0.000001590   0.000002007           7
      D2C               0.000087857   0.001108304   0.004141843           7
    - D2C/Q2C = 95%  so almost time spented in driver and HW
