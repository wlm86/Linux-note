1. serial log
2. dmesg
3. dynamic debug log
4. kdump
5. virsh dump 
6. assembly
7. crash

1. serial log
   1) start/shutdown hang eg: vnc black-screen etc.
      kernel parameter: console=ttyS0,115200,8n1
   2) vm serial log by xml 
      - output as file
       <serial type='file'>
          <source path='///home/user/guest_serial.log'/>
          <target port='0'/>
        </serial>
      - output as pty
       <serial type='pty'>
            <target type='isa-serial' port='0'/>
       </serial>
    
2. dmesg
3. dynamic debug log
   dependence   CONFIG_DYNAMIC_DEBUG=y
    kernel/Documentationdynamic-debug-howto.txt
   - print
     echo  'file nand.c line 4210 +p' > /sys/kernel/debug/dynamic_debug/control

   -  cancel print
     echo  'file nand.c line 4210 -p' > /sys/kernel/debug/dynamic_debug/control

     eg:     pr_debug("  dynamic debug \n");

    dump_stack

4. kdump
   # rpm -qa | grep kexec-tools
   # systemctl status kdump
   # /etc/default/grub.cfg
     crashkernel=256M
   # grub2-mkconfig -o /boot/grub2/grub.cfg

   # echo c > /proc/sysrq-trigger  ( null point can dump)
   # ls /var/crash/
   # crash vmlinux System.map core_dump
     crash > log
             ps
             bt <PID>
             bt -f
             vm
             dis -r /dis -l

     1) hang ;   ps | grep UN   see the sleep process
     2) crash:   bt
     3) common:  dis、struct、task、foreach bt、rd、p etc.
     objdump


   

5. virsh dump
   # virsh dump rhel-server-7.1-x86_64 /home/user/debug/rhel-7.1-x86_64.core

6. assembly
   https://www.cnblogs.com/secondtonone1/p/6617884.html
   https://www.cnblogs.com/secondtonone1/p/6652155.html
   add +
   sub -
   imul *
   idiv /
   dec  --
   neg  negate

   cmp  compare
   je   jump when equal
   jne  jump when not equal
   jg   jump when >
   jge  jump when >=
   jl   jump when <
   
   unsigned jump
   ja   jump above
   jae  jump >=
   jb   jump when below <
  
   
   
7. crash
    bt 栈回溯
     
    log 内核打印
     
    ps 异常发生前的机器进程状态
     
    vm [pid] 当前或某个进程的内存区状态
     
    files 文件句柄
     
    task slab mm_struct 打印出内核定义 结构体
     
    mod -s 加载模块调试信息 如果模块内部函数无调试信息
     
    crash --mod 指明module 所在目录
     
    dis -l 【funcname】反汇编一个函数
     
    struct.member 打印出成员在结构中的偏移信息
     
    mod 模块相关信息
      
    如果反汇编失败，先把debuginfo 包反解到当前目录
    # rpm2cpio debuginfo/kernel-debuginfo-2.6.32-279.el6.x86_64.rpm |cpio -di
      
    crash commands 上下文敏感
     
    help set
     
    set 查询当前上下文进程
     
    set pid 切换上下文到某个进程
     
    set -c 切换到某个cpu
     
    mach 查看堆栈布局
     
    irq 查看irq表
     
    p & 打印全局变量地址
     
    dentry.d_alias ffff8801c6f3e800 -o 打印结构成员的具体地址
     
    kmem -i # general memory usage 内存使用统计
     
    dev -d | awk '{if ($5>0){print}}' 查看异常 io 状态
     
    ps | grep UN | tail # 查看D状态进程 uninterruptible (D state) tasks
     
    struct -o tty_ldisc_ops 显示结构体成员及偏移
     
    per_cpu__XXXX 直接查看某个percpu 指针数组
     
    有时coredump 不全 
     
    可以 crash -d 或 crash --mininal
     
    x/128g address 这个命令dump 某个地址开始的内容

8. register
    %rax 作为函数返回值使用。
    %rsp 栈指针寄存器，指向栈顶
    %rdi，%rsi，%rdx，%rcx，%r8，%r9 用作函数参数，依次对应第1参数，第2参数。。。
    %rbx，%rbp，%r12，%r13，%14，%15 用作数据存储，遵循被调用者使用规则，简单说就是随便用，调用子函数之前要备份它，以防他被修改
    %r10，%r11 用作数据存储，遵循调用者使用规则，简单说就是使用之前要先保存原值
