1- hugepage
2- THP
3- slab
4- buddy
5- HugePage
6- KSM
7- buff/cache (free)
8- kernel dynamic memory
9- /proc/meminfo

1. hugepage
  - set
  # echo 128 > /proc/sys/vm/nr_hugepages
http://linuxperf.com/?p=142


2. THP (anonHugePages)
  - https://access.redhat.com/solutions/46111
  - impact
    https://alexandrnikitin.github.io/blog/transparent-hugepages-measuring-the-performance-impact/
  - RHEL7 
   2MB pages
   purpose: reduce TLB miss
   1) default 
   # grep . /sys/kernel/mm/transparent_hugepage/*
    /sys/kernel/mm/transparent_hugepage/defrag:[always] madvise never
    /sys/kernel/mm/transparent_hugepage/enabled:[always] madvise never
   - defrag 
     compact memory to make more hugepages available.
   - get the wide system-wide THP usage
    # grep AnonHugePages /proc/meminfo
    # egrep 'trans|thp' /proc/vmstat
   - monitor which process is using THP
    # grep -e AnonHugePages  /proc/*/smaps | awk  '{ if($2>4) print $0} ' |  awk -F "/"  '{print $0; system("ps -fp " $3)} '


   2) tuning
    when /proc/buddyinfo last 2 columns is not enough, maybe excute
    the compaction. so may be slowdown the performance.
    so can improve the performance by  off the THP funcion.

   3) test result(s8 cpu:20  memory:128G  RHEL7.6)
     - himeno(large)  
       MFLOPS:
        THP_on/THP_off = 1.05
       TLBMiss:  
        ON						OFF
        12,204              page-faults                |         3,197,713      page-faults         
        94,485,716,891      dTLB-loads                 |    73,614,330,149      dTLB-loads              
             1,741,841      dTLB-load-misses           |       102,719,923      dTLB-load-misses        
                   358      iTLB-loads                 |               274      iTLB-loads              
                95,756      iTLB-load-misses           |         2,054,782      iTLB-load-misses        
     - specjbb_2005  <- Java Business Benchmark
       1) 2jvm/1warehouse
         THP_on/THP_off = 98658/75713 = 1.30
       2) 2jvm/8warehouse
         THP_on/THP_off = 668492/569894 = 1.17
       3) 2jvm/56warehouse
         THP_on/THP_off = 249467/226165 = 1.10
     - tpcc(20 agent)
       THP_on/THP_off = 112.7/104.2 = 1.08   <- tps 
    
5. hugePage
  1) search the process which anonhugepage > 4  
    # grep -e AnonHugePages  /proc/*/smaps | awk  '{ if($2>4) print $0} ' |  awk -F "/"  '{print $0; print $3; system("ps -fp " $3)}'

6. KSM (Kernel Same-page Merging)
   to find the number of pages that are merged,
   look at the /sys/kernel/mm/ksm/pages_shared.

7- buff/cache (free)
   1)  pagecache and buffcache
       page cache -> filesystem  file's data will cached to page cache
       buff cache -> block device  block device's data will cached to buff cache

8- kernel dynamic memory
   1) alloc_pages/_get_free_page      unit is page     alloc_pages used memory difficut to track.
   2) vmalloc              continue-virtual-address memory by unit of byte     
   3) slab allocator
   4) kmalloc              continue-physic-address memory by unit of byte

9- /proc/meminfo
 KERNEL
  1) Slab = SReclaimable + SUnreclaim  
  2) VmallocUsed = grep vmalloc /proc/vmallocinfo | awk '{total+=$2}; END {print total}'
     because kernel module alocate memory by vmalloc(kernel/module.c -> module_malloc -> vmalloc), so vmalloc include
     kernel module memory.
  3) HardwareCorrupted  deleted memory-page for memory hardware corruted.  mm/memory-failure.c: memory_failure().
  4) PageTables     virtual <-> physic,  along with allocated memory is more and more, PageTables will grow.
  5) KernelStack    every thread has 16KB kernelstack memory, but can't access directly, otherwise use syscall/trap/exception. 
  6) Bounce         old-device can only access low-memory.  when IO the device, it will bounce buffering.
 USER
  1) Hugepages     is's not included in RSS/PSS/LRU Active/Inactive/cache/buffer.
     shmget/shmat can allocate Hugepage by SHM_HUGETLB flag.  mmap -> MAP_HUGETLB.
    -HugePages_Total  /proc/sys/vm/nr_hugepages vm.nr_hugepages
    -HugePages_Rsvd
    -HugePages_Free
  2) AnonHugePages  THP(Transparent HugePages)
     for shared-memory and tmpfs will not use THP, so IPC will not use AnonHugePages.
     AnonHuagePages(meminfo) = all anonhugepages of /proc/pid/smaps '
     # grep AnonHugePages /proc/[1-9]*/smaps | awk '{total+=$2}; END {print total}'
        2918400
     # grep AnonHugePages /proc/meminfo
       AnonHugePages:   2881536 kB
  3) LRU    kernel page-frame reclaiming algorithm.
     Inactive(anon) <-> LRU_INACTIVE_ANON 
     Active(anon) <-> LRU_ACTIVE_ANON 
     Inactive(file) <-> LRU_INACTIVE_FILE 
     Active(file) <-> LRU_ACTIVE_FILE 
     Unevictable  <-> LRU_UNEVICTABLE
     
     active:  used recently
     inactive: not used for long time, it's priority-recycled
     anon (anonymous pages) :  process's stack heap
     file (file-backed pages):  process's code and mapping-file etc. when 

     
     
     

