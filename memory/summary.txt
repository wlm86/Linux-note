1- hugepage
2- THP
3- slab
4- buddy
5- HugePage
6- KSM
7- buff/cache (free)
8- kernel dynamic memory
9- /proc/meminfo
10-VSS/RSS/PSS/USS

1. hugepage
  - set
  # echo 128 > /proc/sys/vm/nr_hugepages
http://linuxperf.com/?p=142


2. THP (anonHugePages)
  - https://access.redhat.com/solutions/46111
  - impact
    https://alexandrnikitin.github.io/blog/transparent-hugepages-measuring-the-performance-impact/
  - RHEL7 
   2MB pages
   purpose: reduce TLB miss
   1) default 
   # grep . /sys/kernel/mm/transparent_hugepage/*
    /sys/kernel/mm/transparent_hugepage/defrag:[always] madvise never
    /sys/kernel/mm/transparent_hugepage/enabled:[always] madvise never
   - defrag 
     compact memory to make more hugepages available.
   - get the wide system-wide THP usage
    # grep AnonHugePages /proc/meminfo
    # egrep 'trans|thp' /proc/vmstat
   - monitor which process is using THP
    # grep -e AnonHugePages  /proc/*/smaps | awk  '{ if($2>4) print $0} ' |  awk -F "/"  '{print $0; system("ps -fp " $3)} '


   2) tuning
    when /proc/buddyinfo last 2 columns is not enough, maybe excute
    the compaction. so may be slowdown the performance.
    so can improve the performance by  off the THP funcion.

   3) test result(s8 cpu:20  memory:128G  RHEL7.6)
     - himeno(large)  
       MFLOPS:
        THP_on/THP_off = 1.05
       TLBMiss:  
        ON						OFF
        12,204              page-faults                |         3,197,713      page-faults         
        94,485,716,891      dTLB-loads                 |    73,614,330,149      dTLB-loads              
             1,741,841      dTLB-load-misses           |       102,719,923      dTLB-load-misses        
                   358      iTLB-loads                 |               274      iTLB-loads              
                95,756      iTLB-load-misses           |         2,054,782      iTLB-load-misses        
     - specjbb_2005  <- Java Business Benchmark
       1) 2jvm/1warehouse
         THP_on/THP_off = 98658/75713 = 1.30
       2) 2jvm/8warehouse
         THP_on/THP_off = 668492/569894 = 1.17
       3) 2jvm/56warehouse
         THP_on/THP_off = 249467/226165 = 1.10
     - tpcc(20 agent)
       THP_on/THP_off = 112.7/104.2 = 1.08   <- tps 
    
5. hugePage
  1) search the process which anonhugepage > 4  
    # grep -e AnonHugePages  /proc/*/smaps | awk  '{ if($2>4) print $0} ' |  awk -F "/"  '{print $0; print $3; system("ps -fp " $3)}'

6. KSM (Kernel Same-page Merging)
   to find the number of pages that are merged,
   look at the /sys/kernel/mm/ksm/pages_shared.

7- buff/cache (free)
   1)  pagecache and buffcache
       page cache -> filesystem  file's data will cached to page cache
       buff cache -> block device  block device's data will cached to buff cache

8- kernel dynamic memory
   1) alloc_pages/_get_free_page      unit is page     alloc_pages used memory difficut to track.
   2) vmalloc              continue-virtual-address memory by unit of byte     
   3) slab allocator
   4) kmalloc              continue-physic-address memory by unit of byte

9- /proc/meminfo
 KERNEL
  1) Slab = SReclaimable + SUnreclaim  
  2) VmallocUsed = grep vmalloc /proc/vmallocinfo | awk '{total+=$2}; END {print total}'
     because kernel module alocate memory by vmalloc(kernel/module.c -> module_malloc -> vmalloc), so vmalloc include
     kernel module memory.
  3) HardwareCorrupted  deleted memory-page for memory hardware corruted.  mm/memory-failure.c: memory_failure().
  4) PageTables     virtual <-> physic,  along with allocated memory is more and more, PageTables will grow.
  5) KernelStack    every thread has 16KB kernelstack memory, but can't access directly, otherwise use syscall/trap/exception. 
  6) Bounce         old-device can only access low-memory.  when IO the device, it will bounce buffering.
 USER
  1) Hugepages     is's not included in RSS/PSS/LRU Active/Inactive/cache/buffer.
     shmget/shmat can allocate Hugepage by SHM_HUGETLB flag.  mmap -> MAP_HUGETLB.
    -HugePages_Total  /proc/sys/vm/nr_hugepages vm.nr_hugepages
    -HugePages_Rsvd
    -HugePages_Free
  2) AnonHugePages  THP(Transparent HugePages)
     for shared-memory and tmpfs will not use THP, so IPC will not use AnonHugePages.
     AnonHuagePages(meminfo) = all anonhugepages of /proc/pid/smaps '
     # grep AnonHugePages /proc/[1-9]*/smaps | awk '{total+=$2}; END {print total}'
        2918400
     # grep AnonHugePages /proc/meminfo
       AnonHugePages:   2881536 kB
  3) LRU    kernel page-frame reclaiming algorithm.
     Inactive(anon) <-> LRU_INACTIVE_ANON 
     Active(anon) <-> LRU_ACTIVE_ANON 
     Inactive(file) <-> LRU_INACTIVE_FILE 
     Active(file) <-> LRU_ACTIVE_FILE 
     Unevictable  <-> LRU_UNEVICTABLE
     
     active:  used recently
     inactive: not used for long time, it's priority-recycled
     anon (anonymous pages) :  process's stack heap.   swap-out to disk when memory is not enough.(use swap)
     file (file-backed pages):  process's code and mapping-file etc. can page-out to disk directly when mem is not enough (not use swap).
     unevictable :   can't pageout/swapout pages. included VM_LOCKED/SHM_LOCK page and ramfs.   https://www.kernel.org/doc/Documentation/vm/unevictable-lru.txt
                     UNEVICTABLE PAGE LIST is desinged for hide thes pages from vmscan, for these can't swapout pages will be scan everytime(affect performance).
  4) Shmem
     it's base on tmpfs, so it's not belong to anonymous pages. so it's belong to Cached(ex. page cache) or Mapped(shmem was attached)
     but it has not really disk file. so it will swap-out.  although it's Inactive(anon)/Active(anon)/Unevictable ,bu it's not anonpages.

     - shared memory
       1. SysV sharem memory[shmget etc.]
       2. POSIX shared memory[shm_open etc.]
       3. shared anonymous mmap[mmap(...MAP_ANONYMOUS|MAP_SHARED...)]

     - tmpfs and devtmpfs
       items of /dev/ iaso is shmem
       if dev was not closed before delete, it's mem will not release, can mornitor it by  “lsof -a +L1 /<mount_point>” 
       # lsof -a +L1 /run
        COMMAND   PID      USER   FD   TYPE DEVICE SIZE/OFF NLINK      NODE NAME
        httpd    3773      root    9w   REG   0,18        0     0 834085804 /run/wsgi.3773.0.1.lock (deleted)
        httpd   12311    wwwrun    9w   REG   0,18        0     0 834085804 /run/wsgi.3773.0.1.lock (deleted)
        httpd   12476    wwwrun    9w   REG   0,18        0     0 834085804 /run/wsgi.3773.0.1.lock (deleted)
        httpd   12710    wwwrun    9w   REG   0,18        0     0 834085804 /run/wsgi.3773.0.1.lock (deleted)
        httpd   17256    wwwrun    9w   REG   0,18        0     0 834085804 /run/wsgi.3773.0.1.lock (deleted)
  5) AnonPages
     - page cache's page(cached) is file-backed pages, is not anon pages. Cached and anon-page is not overlapping.
     - shared memory is not belong to anon-pages, belong to cached
     - mmap private anon-pages is belong to Anon-pages, but mmap shared anonmymous pages is Cached(file-backed pages).
     - Anon-pages is coexist with process, Anon-pages will releas alone with process-exited. 
     - Anon-pages include THP's anon-mem in old kernel.  THP's mem is included in latedst kernel(5.3)
        #ifdef CONFIG_TRANSPARENT_HUGEPAGE
        show_val_kb(m, "AnonHugePages:  ",
             global_node_page_state(NR_ANON_THPS) * HPAGE_PMD_NR);

  6) Mapped
     file-backed pages is Mapped. it's a part of page-cached(all mapped pages).
     Theoretically, all process's PSS = Mapped + AnonPages
        # ps -eo pid,%cpu,%mem,rss,args,comm | awk '{ if(NR >1 ) total += $4;} END { print total;}'
        261462868
        # cat /proc/meminfo  | grep -E "Map|AnonPages"
        AnonPages:      251966712 kB
        Mapped:           564084 kB
        
  7) Cached
     Cached(page cache)include all of the file-backed pages. 
     Cached > Mapped   Cached = Mapped + unmapped
     Cached include tmpfs's file(not in hard-disk)  - POSIX/SysV shared memory and shared anonymous mmap.
     Cached and SwapCached is not overlaping.  when Swap in/out, it's SwapCached, other is Cached.
    
  8) SwapCached
    anonymous pages and shared mem(tmpfs is file-backed-page,but has no hard-disk-file) need to use swap.
     shrink_page_list -> add_to_swap -> add_to_swap_cache -> set_page_dirty -> try_to_ummap -> pageout -> try_to_free_swap
  
  9) Mlocked
    memory size locked by syscall of mlock().  for can't pageout/swapout, so it's Unevictable memory.
    it's not independent, maybe overlap with LRU Unevictable，AnonPages，Shmem，Mapped etc.
 
  10) Buffers
    the memory occupied by Block-device.
    direct-IO device/fs metadata SuperBlock-using-pages
    overlap with LRU Active/Iactive(file)
    filemap.c: do_generic_file_read > add_to_page_cache_lru
    
  11) DirectMap
   is TLB(Translation Lookaside Buffer)'s metric. TLB's cpu-cache.   CPU support pages that's more than 4K as 2M/1G,
   it can  reduce the mapping-count.
     
  13) Dirty
    it's not include all of dirty.
    os dirty = Dirty + NFS_unstable + writeback
    NFS_unstable: is send to NFS server but not write to disk's page-cache yet.
    writeback is writing to disk's page-cache.

  ref; http://linuxperf.com/?p=142

  formula
  1) 【Active(anon)+Inactive(anon)】 = 【AnonPages + Shmem】
  2) 【Active(file) + Inactive(file) + Shmem + mlock_file】== 【Cached + Buffers】
  3)  kernel mem =【Slab+ VmallocUsed + PageTables + KernelStack + HardwareCorrupted + Bounce + X】
      X is alloc_pages/__get_free_page 
  4)  LRU MemTotal        = MemFree +【Slab+ VmallocUsed + PageTables + KernelStack + HardwareCorrupted + Bounce + X】+【Active + Inactive + Unevictable + (HugePages_Total * Hugepagesize)】
  5)  Page chche MemTotal = MemFree +【Slab+ VmallocUsed + PageTables + KernelStack + HardwareCorrupted + Bounce + X】+【Cached + AnonPages + Buffers + (HugePages_Total * Hugepagesize)】
  6)  RSS/PSS MemTotal    = MemFree +【Slab+ VmallocUsed + PageTables + KernelStack + HardwareCorrupted + Bounce + X】+【ΣPss + (Cached – mapped) + Buffers + (HugePages_Total * Hugepagesize)】

     VmallocUsed = # grep vmalloc /proc/vmallocinfo | awk '{total+=$2}; END {print total}'
  
10- VSS >= RSS >= PSS >= USS
   # grep Rss /proc/[1-9]*/smaps | awk '{total+=$2}; END {print total}'
    252773396
   # grep Pss /proc/[1-9]*/smaps | awk '{total+=$2}; END {print total}'
    244138253
  VSS- Virtual Set Size 虚拟耗用内存（包含共享库占用的内存）
  RSS- Resident Set Size 实际使用物理内存（包含共享库占用的内存）
  PSS- Proportional Set Size 实际使用的物理内存（比例分配共享库占用的内存）
  USS- Unique Set Size 进程独自占用的物理内存（不包含共享库占用的内存）
