1- summary 
2- usage
3- report
4- ref
   http://fio.readthedocs.io/en/latest/fio_doc.html
   https://github.com/axboe/fio
1. schema
  - io type
  1) read		Sequential reads.
  2) write.		Sequential writes.
  3) rw,readwrite.	Sequential mixed reads and writes.
  4) randread		Random reads.
  5) randwrite		Random writes.
  6) randrw		Random mixed reads and writes.
  7) bw			
  8) iops.
  9) runt. 
  10) lat (msec).
  11) msec. 
  13) usec. 

  - io Engine
  1) libaio		asynchronous IO
  2) sync		synchronous IO	

  - direct (default: 0)
  1) 0			buffer IO
  2) 1			driect IO (without pagecache)

2. usage
  *  when test buffer
    - in order to avoid data instability need to clean memory buffer by "sync"
      # sync
      # echo 3 > /proc/sys/vm/drop_caches 
  
    - the filesize need to less than `cat /proc/sys/vm/dirty_ratio` * `free memory`

  INSTALL
   # git clone  https://github.com/axboe/fio
   # cd fio   
   # make
   # make install
  * option
   bsrange=512-2048 //The size range of the data block, from 512bytes to 2048 bytes
   ioengine=libaio //Specify the io engine
   serspace_reap //With libaio, improve the harvest speed of asynchronous io
   rw=randrw //mix random to write io, default read and write ratio 5:5
   Rwmixwrite=20 //Write 20% in mixed read and write mode
   Time_based //In the runtime stress test cycle, if the specified amount of data is tested, repeat the test.
   Runtime=180 //In 180 seconds, the stress test will terminate
   Direct=1 //Set unbuffered io
   Group_reporting // If the multitasking parameter numjobs is set, replace each job report with each set of reports
   Randrepeat=0 //Set the generated random number to be non-repeatable
   Norandommap
   Ramp_time=6
   Iodepth=16
   Iodepth_batch=8
   Iodepth_low=8
   Iodepth_batch_complete=8
   Exitall //A job is completed, it stops all
   Filename=/dev/mapper/cachedev //File name for stress test
   Numjobs=1 //The default number of jobs, which is the number of concurrent, the default is 1
   Size=200G //The total io size of this job
   Refill_buffers // repeatedly fill io buffer after each commit
   Overwrite=1 //Set file can be overwritten
   sync=1 //Set asynchronous io
   fsync=1 //A io synchronizes data
   Invalidate=1 //Failed buffer-cache before starting io
   Directory=/your_dir // prefix of the fielname parameter value
   Thinktime=600 //wait 600 seconds before releasing io
   Thinktime_spin=200 //time spent cpu, remaining time of thinktime sleep
   Thinktime_blocks=2 //Number of blocks posted before thinktime

   Bssplit=4k/30:8k/40:16k/30 // random read 4k files account for 30%, 8k for 40%, 16k for 30%
   Rwmixread=70 //read 70%

 
3. report
 -latency
  fio record 3 time
  start time (io_u->start_time) >>>>>>  (io_u->issue_time) >>>>>> finish time(icd->time)
  start time:   buffer get ready time
  issuse time:  sync-time before R/W syscall; async-IO request get ready time
  icd->time:    IO finish time
  1) lat (submission latency)   io_u->issue_time        - io_u->start_time
  2) clat (completion latency)  icd->time               - io_u->issue_time
  3) lat (latency)              icd->time               - io_u->start_time

